{"version":3,"sources":["common/textInput.js","common/validate.js","services/auth.js","pages/loginPage.js","pages/signUpPage.js","pages/mainPage.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","formControl","touched","valid","className","minLengthValidator","value","minLength","length","requiredValidator","trim","emailValidator","test","String","toLowerCase","passwordValidator","validate","rules","isValid","rule","auth","isAuthenticated","emailAddress","authenticate","email","password","fetch","method","body","JSON","stringify","headers","then","response","ok","json","console","log","signup","formData","mode","signout","cb","Error","LoginPage","changeHandler","event","name","target","updatedControls","state","formControls","updatedFormElement","validationRules","formIsValid","inputIdentifier","setState","formSubmitHandler","e","preventDefault","formElementId","user","userId","placeholder","isEmail","isPassword","this","pathname","history","location","from","to","style","width","height","position","top","left","zIndex","onSubmit","type","onChange","disabled","exact","React","Component","SignUpPage","first_name","isRequired","last_name","App","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca015f8d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst TextInput = props => {\n  let formControl = \"form-control\";\n\n  if (props.touched && !props.valid) {\n    formControl = \"control-error\";\n  }\n\n  return (\n    <div className=\"form-group\">\n      <input className={formControl} {...props} />\n    </div>\n  );\n};\n\nexport default TextInput;\n","const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case \"minLength\":\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n      case \"isRequired\":\n        isValid = isValid && requiredValidator(value);\n        break;\n      case \"isEmail\":\n        isValid = isValid && emailValidator(value);\n        break;\n      case \"isPassword\":\n        isValid = isValid && passwordValidator(value);\n        break;\n      default:\n        isValid = true;\n    }\n  }\n  return isValid;\n};\n\nconst minLengthValidator = (value, minLength) => value.length >= minLength;\nconst requiredValidator = value => value.trim() !== \"\";\nconst emailValidator = value => {\n  const re = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  return re.test(String(value).toLowerCase());\n};\nconst passwordValidator = value => value.length >= 8 && value.length <= 32;\n\nexport default validate;\n","// This service object was adapted from here:\n//  https://tylermcginnis.com/react-router-protected-routes-authentication/\n//\n// This version was modified to use real authentication implemented\n// in the backend api. It was also modified to return promises instead\n// of using callbacks `cb`.\n\nconst auth = {\n  isAuthenticated: false,\n  emailAddress: \"\",\n  authenticate(email, password) {\n    return fetch(\"/api/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(response => {\n        if (!response.ok) {\n          console.log(\"Login Failed\");\n          return;\n        }\n        return response.json();\n      })\n      .then(body => {\n        this.isAuthenticated = true;\n        this.emailAddress = email;\n        return body;\n      });\n  },\n  signup(formData) {\n    return fetch(\"/api/auth/signup\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    })\n      .then(response => {\n        if (!response.ok) {\n          console.log(\"Registration Failed\");\n          return;\n        }\n        return response.json();\n      })\n      .then(body => {\n        this.emailAddress = formData.email;\n        this.isAuthenticated = true;\n        return body;\n      });\n  },\n  signout(cb) {\n    return fetch(\"/api/auth/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(\"Logout Failed\");\n        }\n\n        return response.json();\n      })\n      .then(body => {\n        this.isAuthenticated = false;\n        return body;\n      });\n  }\n};\n\nexport default auth;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React from \"react\";\nimport \"./loginPage.css\";\nimport TextInput from \"../common/textInput\";\nimport validate from \"../common/validate\";\nimport auth from \"../services/auth.js\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nclass LoginPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isAuthenticated: false,\n      userId: null,\n      formIsValid: false, //we will use this to track the overall form validity\n      formControls: {\n        email: {\n          value: \"\",\n          placeholder: \"Email\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            isEmail: true\n          }\n        },\n        password: {\n          value: \"\",\n          placeholder: \"Password\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            isPassword: true\n          }\n        }\n      }\n    };\n  }\n\n  changeHandler = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    const updatedControls = {\n      ...this.state.formControls\n    };\n    const updatedFormElement = {\n      ...updatedControls[name]\n    };\n    updatedFormElement.value = value;\n    updatedFormElement.touched = true;\n    updatedFormElement.valid = validate(\n      value,\n      updatedFormElement.validationRules\n    );\n\n    updatedControls[name] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedControls) {\n      formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({\n      formControls: updatedControls,\n      formIsValid: formIsValid\n    });\n  };\n\n  formSubmitHandler = e => {\n    e.preventDefault();\n    const formData = {};\n    for (let formElementId in this.state.formControls) {\n      formData[formElementId] = this.state.formControls[formElementId].value;\n    }\n    const { email, password } = formData;\n    auth.authenticate(email, password).then(user => {\n      this.setState({\n        isAuthenticated: true\n      });\n    });\n  };\n\n  render() {\n    if (this.state.isAuthenticated) {\n      const { pathname } = this.props.history.location.state.from || \"/home\";\n      return (\n        <Redirect\n          to={{\n            pathname: pathname\n          }}\n        />\n      );\n    }\n\n    return (\n      <div\n        className=\"Container\"\n        style={{\n          width: \"120vw\",\n          height: \"120vh\",\n          position: \"fixed\",\n          top: \"-20vh\",\n          left: \"-10vw\",\n          zIndex: -1\n        }}\n      >\n        <div className=\"logcard\">\n          <h1>Login</h1>\n          <form onSubmit={this.formSubmitHandler}>\n            <TextInput\n              name=\"email\"\n              type={\"email\"}\n              placeholder={this.state.formControls.email.placeholder}\n              value={this.state.formControls.email.value}\n              onChange={this.changeHandler}\n              touched={this.state.formControls.email.touched}\n              valid={this.state.formControls.email.value}\n            />\n            <TextInput\n              name=\"password\"\n              type={\"password\"}\n              placeholder={this.state.formControls.password.placeholder}\n              value={this.state.formControls.password.value}\n              onChange={this.changeHandler}\n              touched={this.state.formControls.password.touched}\n              valid={this.state.formControls.password.value}\n            />\n\n            <input\n              type=\"submit\"\n              name=\"login\"\n              disabled={!this.state.formIsValid}\n            />\n          </form>\n          <div>\n            <p>\n              Not a member?\n              <Link className=\"nav-link\" exact to=\"/signup\">\n                signup\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React from \"react\";\nimport \"./loginPage.css\";\nimport TextInput from \"../common/textInput\";\nimport validate from \"../common/validate\";\n// import auth from \"../services/auth\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nclass SignUpPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: null,\n      formIsValid: false, //we will use this to track the overall form validity\n\n      formControls: {\n        first_name: {\n          value: \"\",\n          placeholder: \"First Name\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        last_name: {\n          value: \"\",\n          placeholder: \"Last Name\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        email: {\n          value: \"\",\n          placeholder: \"Email\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            isEmail: true\n          }\n        },\n        password: {\n          value: \"\",\n          placeholder: \"Password\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            isPassword: true\n          }\n        }\n      }\n    };\n  }\n\n  changeHandler = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    const updatedControls = {\n      ...this.state.formControls\n    };\n    const updatedFormElement = {\n      ...updatedControls[name]\n    };\n    updatedFormElement.value = value;\n    updatedFormElement.touched = true;\n    updatedFormElement.valid = validate(\n      value,\n      updatedFormElement.validationRules\n    );\n\n    updatedControls[name] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedControls) {\n      formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({\n      formControls: updatedControls,\n      formIsValid: formIsValid\n    });\n  };\n\n  formSubmitHandler = e => {\n    e.preventDefault();\n    const formData = {};\n    for (let formElementId in this.state.formControls) {\n      formData[formElementId] = this.state.formControls[formElementId].value;\n    }\n    // auth.signup(formData).then(user => {\n    //   this.setState({ userId: user.id });\n    // });\n  };\n\n  render() {\n    // if (auth.isAuthenticated) {\n    //   return (\n    //     <Redirect\n    //       to={{\n    //         pathname: \"/home\",\n    //         id: this.state.userId\n    //       }}\n    //     />\n    //   );\n    // }\n    return (\n      <div\n        className=\"Container\"\n        style={{\n          width: \"120vw\",\n          height: \"120vh\",\n          position: \"fixed\",\n          top: \"-10vh\",\n          left: \"-10vw\",\n          zIndex: -1\n        }}\n      >\n        <div className=\"logcard signupl\">\n          <h1>Sign up</h1>\n          <form onSubmit={this.formSubmitHandler}>\n            <TextInput\n              name=\"first_name\"\n              type={\"text\"}\n              placeholder={this.state.formControls.first_name.placeholder}\n              value={this.state.formControls.first_name.value}\n              onChange={this.changeHandler}\n              touched={this.state.formControls.first_name.touched}\n              valid={this.state.formControls.first_name.value}\n            />\n            <TextInput\n              name=\"last_name\"\n              type={\"text\"}\n              placeholder={this.state.formControls.last_name.placeholder}\n              value={this.state.formControls.last_name.value}\n              onChange={this.changeHandler}\n              touched={this.state.formControls.last_name.touched}\n              valid={this.state.formControls.last_name.value}\n            />\n            <TextInput\n              name=\"email\"\n              type={\"email\"}\n              placeholder={this.state.formControls.email.placeholder}\n              value={this.state.formControls.email.value}\n              onChange={this.changeHandler}\n              touched={this.state.formControls.email.touched}\n              valid={this.state.formControls.email.value}\n            />\n            <TextInput\n              name=\"password\"\n              type={\"password\"}\n              placeholder={this.state.formControls.password.placeholder}\n              value={this.state.formControls.password.value}\n              onChange={this.changeHandler}\n              touched={this.state.formControls.password.touched}\n              valid={this.state.formControls.password.value}\n            />\n\n            <input\n              type=\"submit\"\n              name=\"login\"\n              disabled={!this.state.formIsValid}\n            />\n          </form>\n\n          <div>\n            <p>\n              Already a member?\n              <Link className=\"nav-link\" exact to=\"/login\">\n                login\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SignUpPage;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass MainPage extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark shadow mb-3 appContainer\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <NavLink\n              className=\"navbar-brand nav-link2 \"\n              exact\n              to=\"/home\"\n            ></NavLink>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport LoginPage from \"./pages/loginPage\";\nimport SignUpPage from \"./pages/signUpPage\";\nimport MainPage from \"./pages/mainPage\";\n// import PrivateRoute from \"./components/privateRoute\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"container-fluid text-center\">\n          <div className=\"row justify-content-center\">\n            <Switch>\n              {/* <PrivateRoute path=\"/home\" component={HomePage} /> */}\n              {/* <Route path=\"/\" component={MainPage} /> */}\n              <Route path=\"/login\" component={LoginPage} />\n              <Route path=\"/\" component={SignUpPage} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}