{"ast":null,"code":"const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case \"minLength\":\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case \"isRequired\":\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      case \"isEmail\":\n        isValid = isValid && emailValidator(value);\n        break;\n\n      case \"isPassword\":\n        isValid = isValid && passwordValidator(value);\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n};\n\nconst minLengthValidator = (value, minLength) => value.length >= minLength;\n\nconst requiredValidator = value => value.trim() !== \"\";\n\nconst emailValidator = value => {\n  const re = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  return re.test(String(value).toLowerCase());\n};\n\nconst passwordValidator = value => value.length >= 8 && value.length <= 32;\n\nexport default validate;","map":{"version":3,"sources":["/Users/jonathanjames/Projects/pass-man/web-client/src/common/validate.js"],"names":["validate","value","rules","isValid","rule","minLengthValidator","requiredValidator","emailValidator","passwordValidator","minLength","length","trim","re","test","String","toLowerCase"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,MAAIC,OAAO,GAAG,IAAd;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AACtB,YAAQE,IAAR;AACE,WAAK,WAAL;AACED,QAAAA,OAAO,GAAGA,OAAO,IAAIE,kBAAkB,CAACJ,KAAD,EAAQC,KAAK,CAACE,IAAD,CAAb,CAAvC;AACA;;AACF,WAAK,YAAL;AACED,QAAAA,OAAO,GAAGA,OAAO,IAAIG,iBAAiB,CAACL,KAAD,CAAtC;AACA;;AACF,WAAK,SAAL;AACEE,QAAAA,OAAO,GAAGA,OAAO,IAAII,cAAc,CAACN,KAAD,CAAnC;AACA;;AACF,WAAK,YAAL;AACEE,QAAAA,OAAO,GAAGA,OAAO,IAAIK,iBAAiB,CAACP,KAAD,CAAtC;AACA;;AACF;AACEE,QAAAA,OAAO,GAAG,IAAV;AAdJ;AAgBD;;AACD,SAAOA,OAAP;AACD,CAtBD;;AAwBA,MAAME,kBAAkB,GAAG,CAACJ,KAAD,EAAQQ,SAAR,KAAsBR,KAAK,CAACS,MAAN,IAAgBD,SAAjE;;AACA,MAAMH,iBAAiB,GAAGL,KAAK,IAAIA,KAAK,CAACU,IAAN,OAAiB,EAApD;;AACA,MAAMJ,cAAc,GAAGN,KAAK,IAAI;AAC9B,QAAMW,EAAE,GAAG,sIAAX;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACb,KAAD,CAAN,CAAcc,WAAd,EAAR,CAAP;AACD,CAHD;;AAIA,MAAMP,iBAAiB,GAAGP,KAAK,IAAIA,KAAK,CAACS,MAAN,IAAgB,CAAhB,IAAqBT,KAAK,CAACS,MAAN,IAAgB,EAAxE;;AAEA,eAAeV,QAAf","sourcesContent":["const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case \"minLength\":\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n      case \"isRequired\":\n        isValid = isValid && requiredValidator(value);\n        break;\n      case \"isEmail\":\n        isValid = isValid && emailValidator(value);\n        break;\n      case \"isPassword\":\n        isValid = isValid && passwordValidator(value);\n        break;\n      default:\n        isValid = true;\n    }\n  }\n  return isValid;\n};\n\nconst minLengthValidator = (value, minLength) => value.length >= minLength;\nconst requiredValidator = value => value.trim() !== \"\";\nconst emailValidator = value => {\n  const re = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  return re.test(String(value).toLowerCase());\n};\nconst passwordValidator = value => value.length >= 8 && value.length <= 32;\n\nexport default validate;\n"]},"metadata":{},"sourceType":"module"}