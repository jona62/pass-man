{"ast":null,"code":"// This service object was adapted from here:\n//  https://tylermcginnis.com/react-router-protected-routes-authentication/\n//\n// This version was modified to use real authentication implemented\n// in the backend api. It was also modified to return promises instead\n// of using callbacks `cb`.\nconst auth = {\n  isAuthenticated: false,\n  emailAddress: \"\",\n\n  authenticate(email, password) {\n    return fetch(\"/api/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (!response.ok) {\n        console.log(\"Login Failed\");\n        return;\n      }\n\n      return response.json();\n    }).then(body => {\n      this.isAuthenticated = true;\n      this.emailAddress = email;\n      return body;\n    });\n  },\n\n  signup(formData) {\n    return fetch(\"/api/auth/signup\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    }).then(response => {\n      if (!response.ok) {\n        console.log(\"Registration Failed\");\n        return;\n      }\n\n      return response.json();\n    }).then(body => {\n      this.emailAddress = formData.email;\n      this.isAuthenticated = true;\n      return body;\n    });\n  },\n\n  signout(cb) {\n    return fetch(\"/api/auth/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Logout Failed\");\n      }\n\n      return response.json();\n    }).then(body => {\n      this.isAuthenticated = false;\n      return body;\n    });\n  }\n\n};\nexport default auth;","map":{"version":3,"sources":["/Users/jonathanjames/Projects/pass-man/web-client/src/services/auth.js"],"names":["auth","isAuthenticated","emailAddress","authenticate","email","password","fetch","method","body","JSON","stringify","headers","then","response","ok","console","log","json","signup","formData","mode","signout","cb","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,IAAI,GAAG;AACXC,EAAAA,eAAe,EAAE,KADN;AAEXC,EAAAA,YAAY,EAAE,EAFH;;AAGXC,EAAAA,YAAY,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC5B,WAAOC,KAAK,CAAC,iBAAD,EAAoB;AAC9BC,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAf,CAFwB;AAG9BM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHqB,KAApB,CAAL,CAOJC,IAPI,CAOEC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA;AACD;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,KAbI,EAcJL,IAdI,CAcEJ,IAAD,IAAU;AACd,WAAKP,eAAL,GAAuB,IAAvB;AACA,WAAKC,YAAL,GAAoBE,KAApB;AACA,aAAOI,IAAP;AACD,KAlBI,CAAP;AAmBD,GAvBU;;AAwBXU,EAAAA,MAAM,CAACC,QAAD,EAAW;AACf,WAAOb,KAAK,CAAC,kBAAD,EAAqB;AAC/BC,MAAAA,MAAM,EAAE,MADuB;AAE/Ba,MAAAA,IAAI,EAAE,MAFyB;AAG/BT,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAHsB;AAM/BH,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeS,QAAf;AANyB,KAArB,CAAL,CAQJP,IARI,CAQEC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA;AACD;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,KAdI,EAeJL,IAfI,CAeEJ,IAAD,IAAU;AACd,WAAKN,YAAL,GAAoBiB,QAAQ,CAACf,KAA7B;AACA,WAAKH,eAAL,GAAuB,IAAvB;AACA,aAAOO,IAAP;AACD,KAnBI,CAAP;AAoBD,GA7CU;;AA8CXa,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,WAAOhB,KAAK,CAAC,kBAAD,EAAqB;AAC/BC,MAAAA,MAAM,EAAE,MADuB;AAE/BI,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFsB,KAArB,CAAL,CAMJC,IANI,CAMEC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,cAAM,IAAIS,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,aAAOV,QAAQ,CAACI,IAAT,EAAP;AACD,KAZI,EAaJL,IAbI,CAaEJ,IAAD,IAAU;AACd,WAAKP,eAAL,GAAuB,KAAvB;AACA,aAAOO,IAAP;AACD,KAhBI,CAAP;AAiBD;;AAhEU,CAAb;AAmEA,eAAeR,IAAf","sourcesContent":["// This service object was adapted from here:\n//  https://tylermcginnis.com/react-router-protected-routes-authentication/\n//\n// This version was modified to use real authentication implemented\n// in the backend api. It was also modified to return promises instead\n// of using callbacks `cb`.\n\nconst auth = {\n  isAuthenticated: false,\n  emailAddress: \"\",\n  authenticate(email, password) {\n    return fetch(\"/api/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          console.log(\"Login Failed\");\n          return;\n        }\n        return response.json();\n      })\n      .then((body) => {\n        this.isAuthenticated = true;\n        this.emailAddress = email;\n        return body;\n      });\n  },\n  signup(formData) {\n    return fetch(\"/api/auth/signup\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(formData),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          console.log(\"Registration Failed\");\n          return;\n        }\n        return response.json();\n      })\n      .then((body) => {\n        this.emailAddress = formData.email;\n        this.isAuthenticated = true;\n        return body;\n      });\n  },\n  signout(cb) {\n    return fetch(\"/api/auth/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Logout Failed\");\n        }\n\n        return response.json();\n      })\n      .then((body) => {\n        this.isAuthenticated = false;\n        return body;\n      });\n  },\n};\n\nexport default auth;\n"]},"metadata":{},"sourceType":"module"}